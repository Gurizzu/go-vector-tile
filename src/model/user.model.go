package model

import (
	"time"

	"git.blackeye.id/Aldi.Rismawan/centrotil/db/umongo"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Generated by https://quicktype.io

type User struct {
	MetadataWithID `bson:",inline"`

	RoleId          string `json:"roleId" bson:"roleId"`
	Email           string `json:"email" bson:"email"`
	EmailVerifiedAt int64  `json:"emailVerifiedAt" bson:"emailVerifiedAt"`
	Password        string `json:"password" bson:"password,omitempty"`
	Username        string `json:"username" bson:"username"`
	About           string `json:"about" bson:"about"`
	Avatar          string `json:"avatar" bson:"avatar"`
	Status          string `json:"status" bson:"status" example:"active"`
}

type User_View struct {
	User `bson:",inline"`
}

type User_Search struct {
	//? Regex
	Search   string `json:"search"`
	Fullname string `json:"fullname"`

	umongo.Request
}

func (o *User_Search) HandleFilter(listFilterAnd *[]bson.M) {
	if search := o.Search; search != "" {
		*listFilterAnd = append(*listFilterAnd, bson.M{"username": primitive.Regex{Pattern: search, Options: "i"}})
	}
	if search := o.Fullname; search != "" {
		*listFilterAnd = append(*listFilterAnd, bson.M{"fullname": primitive.Regex{Pattern: search, Options: "i"}})
	}
}

type User_Login struct {
	Username string `json:"username,omitempty"`
	Password string `json:"password,omitempty"`
}

type User_ResetPassword struct {
	ID          string `json:"id,omitempty" bson:"_id,omitempty"`
	OldPassword string `json:"oldPassword,omitempty"`
	NewPassword string `json:"newPassword,omitempty"`
}

type Resp_JwtToken struct {
	Token  string    `json:"token,omitempty"`
	Expire time.Time `json:"expire,omitempty"`
}

type Resp_User_Login struct {
	User *User         `json:"user,omitempty"`
	Auth Resp_JwtToken `json:"auth,omitempty"`
}
